name: Publish

on:
  push:
    branches: [main]
    paths-ignore:
    - '.github/**'
    - '.vscode/**'
    - 'tests/**'
    - '.*'
    - '*.*-dist'
    - '*.js'
    - '*.json'
    - '*.lock'
    - '*.md'
    - '*.neon'
    - '*.xml'
  # Allow manual triggering
  workflow_dispatch:


permissions:
  contents: read


jobs:
  docker-code-quality:
    uses: ./.github/workflows/docker-code-quality.yml

  javascript-code-quality:
    uses: ./.github/workflows/javascript-code-quality.yml

  php-code-quality:
    uses: ./.github/workflows/php-code-quality.yml

  publish:
    name: Publish Docker image ${{ matrix.image.name }}
    needs:
    - docker-code-quality
    - javascript-code-quality
    - php-code-quality
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        image:
        - name: app
          dockerfile: ./.docker/app/Dockerfile
          repository_dockerhub: supahgreg/tt-rss
          repository_ghcr: ghcr.io/tt-rss/tt-rss
        - name: web-nginx
          dockerfile: ./.docker/web-nginx/Dockerfile
          repository_dockerhub: supahgreg/tt-rss-web-nginx
          repository_ghcr: ghcr.io/tt-rss/tt-rss-web-nginx

    steps:
    - name: Check out code
      uses: actions/checkout@v5

    - name: Get commit timestamp
      run: |
        COMMIT_TIMESTAMP="$(git show -s --format=%ci HEAD)"
        echo "COMMIT_TIMESTAMP=$COMMIT_TIMESTAMP" >> "$GITHUB_ENV"

    - name: Get commit short SHA
      run: |
        COMMIT_SHORT_SHA="$(git rev-parse --short=8 HEAD)"
        echo "COMMIT_SHORT_SHA=$COMMIT_SHORT_SHA" >> "$GITHUB_ENV"

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ matrix.image.repository_dockerhub }}
          ${{ matrix.image.repository_ghcr }}
        tags: |
          # update 'latest'
          type=raw,value=latest
          # short SHA with a 'sha-' prefix (e.g. sha-abc123)
          type=sha

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push to image registries
      id: push
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ${{ matrix.image.dockerfile }}
        platforms: linux/arm64,linux/amd64
        cache-from: |
          type=gha,scope=${{ matrix.image.name }}
          type=registry,ref=${{ matrix.image.repository_ghcr }}:cache
        cache-to: |
          type=gha,scope=${{ matrix.image.name }},mode=max
          type=registry,ref=${{ matrix.image.repository_ghcr }}:cache,mode=max
        # TODO: clean up build arg and environment variable naming.
        build-args: |
          CI_COMMIT_BRANCH=${{ github.ref_name }}
          CI_COMMIT_SHA=${{ github.sha }}
          CI_COMMIT_SHORT_SHA=${{ env.COMMIT_SHORT_SHA }}
          CI_COMMIT_TIMESTAMP=${{ env.COMMIT_TIMESTAMP }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        provenance: true
        sbom: true
        push: true

  publish-version:
    name: Publish version.json
    needs:
    - publish
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Check out code
      uses: actions/checkout@v5

    - name: Generate version.json
      run: |
        # Get the commit short SHA (8 characters) expected by the backend
        COMMIT_SHORT_SHA=$(git rev-parse --abbrev=8 --short HEAD)

        # Get the commit timestamp in Unix format
        COMMIT_TIMESTAMP=$(git show -s --format=%ct HEAD)

        # Create version.json with the expected format for RPC#checkforupdates()
        jq -n \
          --arg commit_id "$COMMIT_SHORT_SHA" \
          --argjson commit_timestamp "$COMMIT_TIMESTAMP" \
          '{
            changeset: {
              id: $commit_id,
              timestamp: $commit_timestamp
            }
          }' > version.json

        cat version.json

    - name: Deploy version.json to gh-pages
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Save version.json to a safe location outside the repo
        cp version.json /tmp/version.json

        # Fetch gh-pages branch
        git fetch origin gh-pages 2>/dev/null || true

        if git rev-parse --verify origin/gh-pages >/dev/null 2>&1; then
          # gh-pages exists
          # Remove the local version.json first to avoid conflicts when switching branches
          rm -f version.json
          git checkout gh-pages
        else
          # Create new orphan gh-pages branch
          git checkout --orphan gh-pages
          git rm -rf . 2>/dev/null || true
        fi

        # Restore version.json from safe location
        cp /tmp/version.json version.json
        git add version.json

        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          # Set up git authentication for GitHub-signed commits
          gh auth setup-git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git commit -m "Update version info [automated]"
          git push origin gh-pages || { echo "Failed to push to gh-pages"; exit 1; }
        fi
